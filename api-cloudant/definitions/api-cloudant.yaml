paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__patch_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__put_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__patch_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: User.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Songs/{id}/clients/{fk}':
    get:
      tags:
        - Song
      summary: Find a related item by id for clients.
      operationId: Song.prototype.__findById__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    delete:
      tags:
        - Song
      summary: Delete a related item by id for clients.
      operationId: Song.prototype.__destroyById__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Song
      summary: Update a related item by id for clients.
      operationId: Song.prototype.__updateById__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Client'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  '/Songs/{id}/clients/rel/{fk}':
    put:
      tags:
        - Song
      summary: Add a related item by id for clients.
      operationId: Song.prototype.__link__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    delete:
      tags:
        - Song
      summary: Remove the clients relation to an item by id.
      operationId: Song.prototype.__unlink__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Song
      summary: Check the existence of clients relation to an item by id.
      operationId: Song.prototype.__exists__clients
      parameters:
        - name: fk
          in: path
          description: Foreign key for clients
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Songs/{id}/clients':
    get:
      tags:
        - Song
      summary: Queries clients of Song.
      operationId: Song.prototype.__get__clients
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
      deprecated: false
    post:
      tags:
        - Song
      summary: Creates a new instance in clients of this model.
      operationId: Song.prototype.__create__clients
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Client'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    delete:
      tags:
        - Song
      summary: Deletes all clients of this model.
      operationId: Song.prototype.__delete__clients
      parameters:
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Songs/{id}/clients/count':
    get:
      tags:
        - Song
      summary: Counts clients of Song.
      operationId: Song.prototype.__count__clients
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Songs:
    post:
      tags:
        - Song
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Song.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    put:
      tags:
        - Song
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Song.upsert__put_Songs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    patch:
      tags:
        - Song
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Song.upsert__patch_Songs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    get:
      tags:
        - Song
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Song.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Song'
      deprecated: false
  /Songs/replaceOrCreate:
    post:
      tags:
        - Song
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Song.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/upsertWithWhere:
    post:
      tags:
        - Song
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Song.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Songs/{id}/exists':
    get:
      tags:
        - Song
      summary: Check whether a model instance exists in the data source.
      operationId: 'Song.exists__get_Songs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Songs/{id}':
    head:
      tags:
        - Song
      summary: Check whether a model instance exists in the data source.
      operationId: 'Song.exists__head_Songs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Song
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Song.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    delete:
      tags:
        - Song
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Song.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Song
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Song.prototype.updateAttributes__put_Songs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    patch:
      tags:
        - Song
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Song.prototype.updateAttributes__patch_Songs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Songs/{id}/replace':
    post:
      tags:
        - Song
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Song.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/findOne:
    get:
      tags:
        - Song
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Song.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/update:
    post:
      tags:
        - Song
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Song.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Songs/count:
    get:
      tags:
        - Song
      summary: Count instances of the model matched by where from the data source.
      operationId: Song.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Feeds/{id}/song':
    get:
      tags:
        - Feed
      summary: Fetches belongsTo relation song.
      operationId: Feed.prototype.__get__song
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Feeds/{id}/client':
    get:
      tags:
        - Feed
      summary: Fetches belongsTo relation client.
      operationId: Feed.prototype.__get__client
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  /Feeds:
    post:
      tags:
        - Feed
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Feed.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    put:
      tags:
        - Feed
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Feed.upsert__put_Feeds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    patch:
      tags:
        - Feed
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Feed.upsert__patch_Feeds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    get:
      tags:
        - Feed
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Feed.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/replaceOrCreate:
    post:
      tags:
        - Feed
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Feed.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/upsertWithWhere:
    post:
      tags:
        - Feed
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Feed.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  '/Feeds/{id}/exists':
    get:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__get_Feeds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Feeds/{id}':
    head:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__head_Feeds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Feed
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Feed.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    delete:
      tags:
        - Feed
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Feed.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Feed
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Feed.prototype.updateAttributes__put_Feeds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    patch:
      tags:
        - Feed
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Feed.prototype.updateAttributes__patch_Feeds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  '/Feeds/{id}/replace':
    post:
      tags:
        - Feed
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Feed.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/findOne:
    get:
      tags:
        - Feed
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Feed.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/update:
    post:
      tags:
        - Feed
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Feed.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Feeds/count:
    get:
      tags:
        - Feed
      summary: Count instances of the model matched by where from the data source.
      operationId: Feed.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Clients/{id}/accessTokens/{fk}':
    get:
      tags:
        - Client
      summary: Find a related item by id for accessTokens.
      operationId: Client.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Client
      summary: Delete a related item by id for accessTokens.
      operationId: Client.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Client
      summary: Update a related item by id for accessTokens.
      operationId: Client.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Clients/{id}/songs/{fk}':
    get:
      tags:
        - Client
      summary: Find a related item by id for songs.
      operationId: Client.prototype.__findById__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    delete:
      tags:
        - Client
      summary: Delete a related item by id for songs.
      operationId: Client.prototype.__destroyById__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Client
      summary: Update a related item by id for songs.
      operationId: Client.prototype.__updateById__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Clients/{id}/songs/rel/{fk}':
    put:
      tags:
        - Client
      summary: Add a related item by id for songs.
      operationId: Client.prototype.__link__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    delete:
      tags:
        - Client
      summary: Remove the songs relation to an item by id.
      operationId: Client.prototype.__unlink__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Client
      summary: Check the existence of songs relation to an item by id.
      operationId: Client.prototype.__exists__songs
      parameters:
        - name: fk
          in: path
          description: Foreign key for songs
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Clients/{id}/accessTokens':
    get:
      tags:
        - Client
      summary: Queries accessTokens of Client.
      operationId: Client.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Client
      summary: Creates a new instance in accessTokens of this model.
      operationId: Client.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Client
      summary: Deletes all accessTokens of this model.
      operationId: Client.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Clients/{id}/accessTokens/count':
    get:
      tags:
        - Client
      summary: Counts accessTokens of Client.
      operationId: Client.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Clients/{id}/songs':
    get:
      tags:
        - Client
      summary: Queries songs of Client.
      operationId: Client.prototype.__get__songs
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Song'
      deprecated: false
    post:
      tags:
        - Client
      summary: Creates a new instance in songs of this model.
      operationId: Client.prototype.__create__songs
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    delete:
      tags:
        - Client
      summary: Deletes all songs of this model.
      operationId: Client.prototype.__delete__songs
      parameters:
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Clients/{id}/songs/count':
    get:
      tags:
        - Client
      summary: Counts songs of Client.
      operationId: Client.prototype.__count__songs
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clients:
    post:
      tags:
        - Client
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Client.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    put:
      tags:
        - Client
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Client.upsert__put_Clients
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    patch:
      tags:
        - Client
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Client.upsert__patch_Clients
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    get:
      tags:
        - Client
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Client.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
      deprecated: false
  /Clients/replaceOrCreate:
    post:
      tags:
        - Client
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Client.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  /Clients/upsertWithWhere:
    post:
      tags:
        - Client
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Client.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  '/Clients/{id}/exists':
    get:
      tags:
        - Client
      summary: Check whether a model instance exists in the data source.
      operationId: 'Client.exists__get_Clients_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Clients/{id}':
    head:
      tags:
        - Client
      summary: Check whether a model instance exists in the data source.
      operationId: 'Client.exists__head_Clients_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Client
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Client.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    delete:
      tags:
        - Client
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Client.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Client
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Client.prototype.updateAttributes__put_Clients_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Client'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
    patch:
      tags:
        - Client
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Client.prototype.updateAttributes__patch_Clients_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Client'
        - name: id
          in: path
          description: Client id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  '/Clients/{id}/replace':
    post:
      tags:
        - Client
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Client.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  /Clients/findOne:
    get:
      tags:
        - Client
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Client.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Client'
      deprecated: false
  /Clients/update:
    post:
      tags:
        - Client
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Client.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Clients/count:
    get:
      tags:
        - Client
      summary: Count instances of the model matched by where from the data source.
      operationId: Client.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clients/login:
    post:
      tags:
        - Client
      summary: Login a user with username/email and password.
      operationId: Client.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Clients/logout:
    post:
      tags:
        - Client
      summary: Logout a user with access token.
      operationId: Client.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Clients/confirm:
    get:
      tags:
        - Client
      summary: Confirm a user registration with email verification token.
      operationId: Client.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Clients/reset:
    post:
      tags:
        - Client
      summary: Reset password for a user with email.
      operationId: Client.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Client:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      id:
        type: string
    required:
      - email
    additionalProperties: false
  Feed:
    properties:
      date:
        type: string
      songId:
        description: foreign key for Song relation
        type: string
      clientId:
        description: foreign key for Client relation
        type: string
      id:
        type: string
    additionalProperties: false
  Song:
    properties:
      name:
        type: string
      id:
        type: string
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: api-cloudant
  version: 1.0.0
  title: api-cloudant
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: >-
          https://apiconnect-f388fb2d-432d-429d-9b93-4947010bc7c0.tltranstudentvunl-dev.apic.mybluemix.net
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
